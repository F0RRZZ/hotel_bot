from loader import bot
from random import choice
from api_requests import *
from telebot import types
from message_templates import send_history_message


@bot.message_handler(commands=['start', 'hello-world', 'lowprice', 'highprice', 'bestdeal', 'history', 'help'])
def get_message(message):
    if message.text == '/start':
        text = '–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Hotel Search Assistant!üè¢\n' \
               '–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –≤–∞–º –æ—Ç–µ–ª—å –≤ –ª—é–±–æ–π —Ç–æ—á–∫–µ –º–∏—Ä–∞ üòâ\n' \
               '–í–≤–µ–¥–∏—Ç–µ /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö.'
        image = 'https://static.vecteezy.com/system/resources/previews/003/216/630/non_2x/find-hotel-or-search-hotels-concept-with-smartphone-maps-gps-free-vector.jpg'
        bot.send_photo(message.chat.id, image, caption=text)
    elif message.text == "/hello-world":
        bot.send_message(message.chat.id,
                         choice(["–ü—Ä–∏–≤–µ—Çüëã", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!"]) + '\n' + '–í–≤–µ–¥–∏—Ç–µ /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö.')
    elif message.text == "/lowprice" or message.text == "/highprice":
        city_getter(message, message.text[1:])
    elif message.text == '/help':
        text = '‚öô–°–ø–∏—Å–æ–∫ –∫–æ–º–º–∞–Ω–¥:\n' \
               '/lowprice - –í—ã–≤–æ–¥ –æ—Ç–µ–ª–µ–π –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –≤ —Ü–µ–Ω–µ\n' \
               '/highprice - –í—ã–≤–æ–¥ –æ—Ç–µ–ª–µ–π –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤ —Ü–µ–Ω–µ\n' \
               '/bestdeal - –≤—ã–≤–æ–¥ –æ—Ç–µ–ª–µ–π, –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ —Ü–µ–Ω–µ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é –æ—Ç —Ü–µ–Ω—Ç—Ä–∞.\n' \
               '/history - –≤—ã–≤–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π.'
        bot.send_message(message.chat.id, text)
    elif message.text == '/history':
        show_history(message)


@bot.message_handler(content_types=['text'])
def greeting_after_text(message):
    if message.text.lower() == "–ø—Ä–∏–≤–µ—Ç":
        bot.send_message(message.chat.id,
                         choice(["–ü—Ä–∏–≤–µ—Çüëã", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!"]) + '\n' + '–í–≤–µ–¥–∏—Ç–µ /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö.')
    else:
        bot.send_message(message.chat.id, '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é üôÅ')


def city_getter(message: types.Message, filter_type: str):
    check_in = (dt.datetime.now() + dt.timedelta(1)).date()
    check_out = (dt.datetime.now() + dt.timedelta(2)).date()
    msg = bot.send_message(message.chat.id, "üîé–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥")
    bot.register_next_step_handler(msg, hotels_count_getter, filter_type, check_in, check_out)


def hotels_count_getter(message: types.Message, filter_type: str, check_in: datetime.date, check_out: datetime.date):
    city = message.text
    city_founded, destination = get_destination(city)
    if not city_founded:
        bot.send_message(message.chat.id, "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. üôÅ")
        return
    msg = bot.send_message(message.chat.id, '–°–∫–æ–ª—å–∫–æ –æ—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑–∞—Ç—å? (–¥–æ 10)')
    bot.register_next_step_handler(msg, is_photos_need, filter_type, check_in, check_out, destination, city)


def is_photos_need(message, filter_type: str, check_in: datetime.date, check_out: datetime.date, destination, city: str):
    if not message.text.isdigit():
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ üôÅ')
        return
    hotels_count = int(message.text)
    if hotels_count not in range(1, 11):
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π üôÅ')
        return

    msg = bot.send_message(message.chat.id, '–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏? (–¥–∞/–Ω–µ—Ç)')
    bot.register_next_step_handler(msg, photos_count_getter, filter_type, check_in, check_out, destination, city, hotels_count)


def photos_count_getter(message: types.Message, filter_type: str, check_in: datetime.date, check_out: datetime.date,
                        destination: str, city: str, hotels_count: int):
    if message.text.lower() in ("–¥–∞", "yes", "–¥", "y"):
        msg = bot.send_message(message.chat.id, '–°–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π? (–¥–æ 3)')
        bot.register_next_step_handler(msg,
                                       check_photos_count,
                                       filter_type,
                                       check_in,
                                       check_out,
                                       destination,
                                       city,
                                       hotels_count,
                                       message.text)
    elif message.text.lower() in ("–Ω–µ—Ç", "no", "–Ω", "n"):
        get_low_or_high_price(message,
                              filter_type,
                              check_in,
                              check_out,
                              destination,
                              city,
                              hotels_count,
                              message.text)
    else:
        bot.send_message(message.chat.id, '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é üòï')


def check_photos_count(message: types.Message, filter_type: str, check_in: datetime.date, check_out: datetime.date,
                       destination: str, city: str, hotels_count: int, answer: str):
    if not message.text.isdigit():
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ üôÅ')
        return
    photos_count = int(message.text)
    if photos_count not in range(1, 4):
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π üôÅ')
        return
    get_low_or_high_price(message,
                          filter_type,
                          check_in,
                          check_out,
                          destination,
                          city,
                          hotels_count,
                          answer,
                          photos_count=photos_count)


def show_history(message: types.Message):
    history = []
    with sqlite3.connect("history.sqlite") as connection:
        cur = connection.cursor()
        for i in cur.execute("""SELECT * FROM all_history
                                WHERE userId = ?""", (message.chat.id,)).fetchall():
            history.append(i)
            if len(history) == 5:
                break
    for i in history:
        send_history_message(message, i[1], i[2], i[3:])


if __name__ == "__main__":
    bot.infinity_polling()
